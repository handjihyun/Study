server <- function(input, output, session){
# input 매개변수 <- UI 로부터 입력받은 데이터 저장
# input$type, input$age
# Rendering(Show) data of output UI
# output$blood, output$pAge
output$blood <- renderText(paste("당신의 혈액형은 ", input$type, '형 입니다.'))
}
# Shiny App 실행 부분 ------------------------
shinyApp(ui, server)
# SERVER 구현 부분 ---------------------------
server <- function(input, output, session){
# input 매개변수 <- UI 로부터 입력받은 데이터 저장
# input$type, input$age
# Rendering(Show) data of output UI
# output$blood, output$pAge
output$blood <- renderText(paste("당신의 혈액형은 ", input$type, '형 입니다.'))
output$pAge <- renderPlot(0:input$age)
}
# Shiny App 실행 부분 ------------------------
shinyApp(ui, server)
# SERVER 구현 부분 ---------------------------
server <- function(input, output, session){
# input 매개변수 <- UI 로부터 입력받은 데이터 저장
# input$type, input$age
# Rendering(Show) data of output UI
# output$blood, output$pAge
output$blood <- renderText(paste("당신의 혈액형은 ", input$type, '형 입니다.'))
output$pAge <- renderPlot({0:input$age})
}
# Shiny App 실행 부분 ------------------------
shinyApp(ui, server)
# SERVER 구현 부분 ---------------------------
server <- function(input, output, session){
# input 매개변수 <- UI 로부터 입력받은 데이터 저장
# input$type, input$age
# Rendering(Show) data of output UI
# output$blood, output$pAge
output$blood <- renderText(paste("당신의 혈액형은 ", input$type, '형 입니다.'))
output$pAge <- renderPlot( plot({0:input$age}) )
}
# Shiny App 실행 부분 ------------------------
shinyApp(ui, server)
# SERVER 구현 부분 ---------------------------
server <- function(input, output, session){
# input 매개변수 <- UI 로부터 입력받은 데이터 저장
# input$type, input$age
# Rendering(Show) data of output UI
# output$blood, output$pAge
output$blood <- renderText(paste("당신의 혈액형은 ", input$type, '형 입니다.'))
output$pAge <- renderPlot( plot({0:input$age}, col = 'blue') )
}
# Shiny App 실행 부분 ------------------------
shinyApp(ui, server)
# --------------------------------------------
ui <- fluidPage(
# add title of webpage
titlePanel("Data Analysis"),
# add webpage content UI
tabsetPanel(
tabPanel('캐럿에 대한 분석 결과'),
tabPanel('투명도에 대한 분석 결과'),
tabPanel('컷팅에 대한 분석 결과')
)
)
# Shiny App 실행 부분 ------------------------
shinyApp(ui, server)
# --------------------------------------------
ui <- fluidPage(
# add title of webpage
titlePanel("다이아몬드 데이터 분석"),
# add webpage content UI
tabsetPanel(
tabPanel('캐럿에 대한 분석 결과'),
tabPanel('투명도에 대한 분석 결과'),
tabPanel('컷팅에 대한 분석 결과')
)
)
# Shiny App 실행 부분 ------------------------
shinyApp(ui, server)
# Shiny App 실행 부분 ------------------------
shinyApp(ui, server)
# UI 요소 구성 부분 --------------------------
ui <- fluidPage(
# add title of webpage
titlePanel("Data Analysis"),
# add webpage content UI
# divide window left&right => sidebarLayout()
sidebarLayout(
# Left
sidebarPanel(
# Input UI
radioButtons('type', 'Blood TYPE:', c('A', 'B', 'AB', 'O')),
br(),
br(),
br(),
sliderInput('age', 'AGE', min = 0, max = 200, value = 20)
),
# Right
mainPanel(
# Output UI
# Print Blood Type to text
textOutput("blood"),
# Print graph about Age
plotOutput("pAge")
)
)
)
# SERVER 구현 부분 ---------------------------
server <- function(input, output, session){
# input 매개변수 <- UI 로부터 입력받은 데이터 저장
# input$type, input$age
# Rendering(Show) data of output UI
# output$blood, output$pAge
output$blood <- renderText(paste("당신의 혈액형은 ", input$type, '형 입니다.'))
output$pAge <- renderPlot( plot({0:input$age}, col = 'blue') )
}
# --------------------------------------------
ui <- fluidPage(
# add title of webpage
titlePanel("다이아몬드 데이터 분석"),
# add webpage content UI
# divide window by tab
tabsetPanel(
tabPanel('캐럿에 대한 분석 결과'),
tabPanel('투명도에 대한 분석 결과'),
tabPanel('컷팅에 대한 분석 결과')
)
)
# UI 요소 구성 부분 --------------------------
ui <- fluidPage(
# add title of webpage
titlePanel("Data Analysis"),
# add webpage content UI
# divide window left&right => sidebarLayout()
sidebarLayout(
# Left
sidebarPanel(
# Input UI
radioButtons('type', 'Blood TYPE:', c('A', 'B', 'AB', 'O')),
br(),
br(),
br(),
sliderInput('age', 'AGE', min = 0, max = 200, value = 20)
),
# Right
mainPanel(
# Output UI
# Print Blood Type to text
textOutput("blood"),
# Print graph about Age
plotOutput("pAge")
)
)
)
# SERVER 구현 부분 ---------------------------
server <- function(input, output, session){
# input 매개변수 <- UI 로부터 입력받은 데이터 저장
# input$type, input$age
# Rendering(Show) data of output UI
# output$blood, output$pAge
output$blood <- renderText(paste("당신의 혈액형은 ", input$type, '형 입니다.'))
output$pAge <- renderPlot( plot({0:input$age}, col = 'blue') )
}
# Shiny App 실행 부분 ------------------------
shinyApp(ui, server)
library(datarium)
install.packages("datarium")
library(datarium)
marketing
read.csv('SeoulBikeData.csv')
dat <- read.csv("C:\Users\user\Desktop\SeoulBikeData.csv")
dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv")
dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv", encoding = 'utf-8')
dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv", encoding = 'utf-8')
dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv", encoding = 'utf-8')
dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv", encoding = 'euc-kr')
dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv", encoding = 'euc-kr')
dat
dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv")
dat
str(dat)
sum(is.num(dat))
sum(is.na(dat))
sum(is.na(dat))
str(dat)
# ===============================================================
# Seoul Bike Sharing Demand
# ===============================================================
dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv")
dat
str(dat)
dat <- dat[2:11]
dat <- dat[2:11]; dat
dat <- dat[,2:11]; dat
dat <- dat[2:11,]; dat
dat <- dat[, 2:11]; dat
dat <- dat[ ,2:11]; dat
dat <- dat[ ,2:10]; dat
dat <- dat[ ,2:10]; dat
dat <- dat[ ,2:11]; dat
dat <- dat[ ,2:10]; dat
# ===============================================================
# Seoul Bike Sharing Demand
# ===============================================================
dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv")
dat
str(dat)
sum(is.na(dat))
dat <- dat[ ,2:10]; dat
# ===============================================================
# Seoul Bike Sharing Demand
# ===============================================================
dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv")
dat
str(dat)
sum(is.na(dat))
dat <- dat[ ,2:11]; dat
cor(dat)
cor(dat)
plot(dat)
plot(dat)
plot(dat)
plot(cor(dat))
out <- lm(Rented_Bike_Count ~ ., data = dat)
out <- lm(Rented_Bike_Count ~ ., data = dat); out
summary(out)
plot(dat$Rented_Bike_Count)
plot(Rented_Bike_Count ~ Hour+Temperature+Humidity)
plot(Rented_Bike_Count ~ Hour+Temperature+Humidity, data = dat)
# ===============================================================
# Seoul Bike Sharing Demand
# ===============================================================
dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv")
dat
str(dat)
sum(is.na(dat))
dat <- dat[ ,2:11]; dat
plot(cor(dat))
out <- lm(Rented_Bike_Count ~ ., data = dat); out
summary(out)
plot(out)
par(mfrow = c(2, 2))
plot(out)
# ----------------------------------------------------------------
out <- lm(Rented_Bike_Count ~ Hour + Temperature + Humidity + Visibility + Solar_Radiation + Rainfall, data = dat); out
summary(out)
plot(dat)
# ----------------------------------------------------------------
out <- lm(Rented_Bike_Count ~ Hour + Temperature + Humidity + Visibility
+ Solar_Radiation + Rainfall, data = dat); out
summary(out)
plot(Rented_Bike_Count ~ ., data = dat)
par(mfrow = c(3,3))
plot(Rented_Bike_Count ~ ., data = dat)
# ----------------------------------------------------------------
out <- lm(Rented_Bike_Count ~ Hour + Temperature + Humidity
+ Solar_Radiation + Rainfall, data = dat); out
summary(out)
# multiple linear regression
out <- lm(Rented_Bike_Count ~ ., data = dat); out
summary(out)
# multiple linear regression
out <- lm(Rented_Bike_Count ~ ., data = dat); out
summary(out)
library(psych)
library(car)
pairs.panels(dat[names(dat)])
cor(dat)
cor(dat)
# ===============================================================
# Seoul Bike Sharing Demand
# ===============================================================
dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv")
dat
# check data
str(dat)
# check missing data
sum(is.na(dat))
# select columns
dat <- dat[ ,2:11]; dat
# correaltion
cor(dat)
# y = Rented_Bike_Count, x = each column except Rented_Bike_Count
par(mfrow = c(3,3))
plot(Rented_Bike_Count ~ ., data = dat)
# ===============================================================
# Seoul Bike Sharing Demand
# ===============================================================
dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv")
# multiple linear regression
out <- lm(Rented_Bike_Count ~ ., data = dat); out
summary(out)
# ===============================================================
# Seoul Bike Sharing Demand
# ===============================================================
dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv")
dat
# check data
str(dat)
# check missing data
sum(is.na(dat))
# select columns
dat <- dat[ ,2:11]; dat
# correaltion
cor(dat)
# y = Rented_Bike_Count, x = each column except Rented_Bike_Count
par(mfrow = c(3,3))
plot(Rented_Bike_Count ~ ., data = dat)
out <- lm(Rented_Bike_Count ~ ., data = dat); out
summary(out)
# 다중공선성 확인
car::vif(out)
sqrt(car::vif(out)) > 2
par(mfrow = c(2, 2))
plot(out)
# 전진 선택
# 상수항만 포함시킨 회귀모형
fit.con <- lm(Rented_Bike_Count~1, data = dat)
fit.forward <- step(fit.con, scope = list(lower = fit.con, upper = out),
direction = 'forward')
fit.forward
# ----------------------------------------------------------------
out <- lm(formula = Rented_Bike_Count ~ Temperature + Hour + Humidity +
Rainfall + Solar_Radiation + Visibility + Snowfall, data = dat) out
summary(out)
par(mfrow = c(2, 2))
plot(out)
plot(Rented_Bike_Count ~ Hour+Temperature+Humidity, data = dat)
# 후진 소거
fit.backward <- step(out, scope = list(lower = fit.con, upper = out),
direction = 'backward')
fit.backward
# ----------------------------------------------------------------
out <- lm(formula = Rented_Bike_Count ~ Temperature + Hour + Humidity +
Rainfall + Solar_Radiation + Visibility + Snowfall, data = dat)
summary(out)
summary(fit.backward)
# 단계별 선택법
fit.both <- step(fit.con, scope = list(lower = fit.con, upper = out),
direction = 'both')
fit.both
summary(fit.both)
# multiple linear regression
out <- lm(Rented_Bike_Count ~ ., data = dat); out
summary(out)
# check data
str(dat)
model_3 <- lm(Rented_Bike_Count ~ Temperature + Hour + Humidity +
Rainfall + Solar_Radiation + Visibility + Snowfall, data = dat)
result = relweights(model_3, col = 'blue')
result
result <- relweights(model_3, col = 'blue')
result
model_3 <- lm(Rented_Bike_Count ~ Temperature + Hour + Humidity +
Rainfall + Solar_Radiation + Visibility + Snowfall, data = dat)
result <- relweights(model_3, col = 'blue')
result
# 변수의 상대적 중요도를 시각화
model_3 <- lm(Rented_Bike_Count ~ Temperature + Hour + Humidity +
Rainfall + Solar_Radiation + Visibility + Snowfall, data = dat)
model_3
# 변수의 상대적 중요도를 시각화
model_1 <- lm(Rented_Bike_Count ~ Temperature + Hour + Humidity +
Rainfall + Solar_Radiation + Visibility + Snowfall, data = dat)
result <- relweights(model_1, col = 'blue')
library('MASS')
result <- relweights(model_1, col = 'blue')
result <- relweights(model_1, col = 'blue')
relweights <-
function(fit,...){
R <- cor(fit$model)
nvar <- ncol(R)
rxx <- R[2:nvar, 2:nvar]
rxy <- R[2:nvar, 1]
svd <- eigen(rxx)
evec <- svd$vectors
ev <- svd$values
delta <- diag(sqrt(ev))
lambda <- evec %*% delta %*% t(evec)
lambdasq <- lambda ^ 2
beta <- solve(lambda) %*% rxy
rsquare <- colSums(beta ^ 2)
rawwgt <- lambdasq %*% beta ^ 2
import <- (rawwgt / rsquare) * 100
lbls <- names(fit$model[2:nvar])
rownames(import) <- lbls
colnames(import) <- "Weights"
barplot(t(import),names.arg=lbls,
ylab="% of R-Square",
xlab="Predictor Variables",
main="Relative Importance of Predictor Variables",
sub=paste("R-Square=", round(rsquare, digits=3)),
...)
return(import)
}
result <- relweights(model_1, col = 'blue')
result
relweights <-
function(fit,...){
R <- cor(fit$model)
nvar <- ncol(R)
rxx <- R[2:nvar, 2:nvar]
rxy <- R[2:nvar, 1]
svd <- eigen(rxx)
evec <- svd$vectors
ev <- svd$values
delta <- diag(sqrt(ev))
lambda <- evec %*% delta %*% t(evec)
lambdasq <- lambda ^ 2
beta <- solve(lambda) %*% rxy
rsquare <- colSums(beta ^ 2)
rawwgt <- lambdasq %*% beta ^ 2
import <- (rawwgt / rsquare) * 100
lbls <- names(fit$model[2:nvar])
rownames(import) <- lbls
colnames(import) <- "Weights"
barplot(t(import),names.arg=lbls,
ylab="% of R-Square",
xlab="Predictor Variables",
main="Relative Importance of Predictor Variables",
sub=paste("R-Square=", round(rsquare, digits=3)),
...)
return(import)
}
par(mfrow = c(1, 1))
result <- relweights(model_1, col = 'blue')
result
relweights <-
function(fit,...){
R <- cor(fit$model)
nvar <- ncol(R)
rxx <- R[2:nvar, 2:nvar]
rxy <- R[2:nvar, 1]
svd <- eigen(rxx)
evec <- svd$vectors
ev <- svd$values
delta <- diag(sqrt(ev))
lambda <- evec %*% delta %*% t(evec)
lambdasq <- lambda ^ 2
beta <- solve(lambda) %*% rxy
rsquare <- colSums(beta ^ 2)
rawwgt <- lambdasq %*% beta ^ 2
import <- (rawwgt / rsquare) * 100
lbls <- names(fit$model[2:nvar])
rownames(import) <- lbls
colnames(import) <- "Weights"
barplot(t(import),names.arg=lbls,
ylab="% of R-Square",
xlab="Predictor Variables",
main="Relative Importance of Predictor Variables",
sub=paste("R-Square=", round(rsquare, digits=3)),
...)
return(import)
}
par(mfrow = c(1, 1))
result <- relweights(model_1, col = 'blue')
result <- relweights(model_1, col = 'blue'); result
# ===============================================================
# Seoul Bike Sharing Demand
# ===============================================================
'dat <- read.csv("C:\\Users\\user\\Desktop\\SeoulBikeData.csv")
dat
# check data
str(dat)
# check missing data
sum(is.na(dat))
# select columns
dat <- dat[ ,2:11]; dat
# correaltion
cor(dat)
# y = Rented_Bike_Count, x = each column except Rented_Bike_Count
par(mfrow = c(3,3))
plot(Rented_Bike_Count ~ ., data = dat)
# multiple linear regression
out <- lm(Rented_Bike_Count ~ ., data = dat); out
summary(out)
par(mfrow = c(2, 2))
plot(out)
# 다중공선성 확인
# 2보다 크면 다중공선성이 있는 것
car::vif(out)
sqrt(car::vif(out)) > 2
# -> True 제외(Temperature, Humidity, Dew_point_temperature)
# 전진 선택
# 상수항만 포함시킨 회귀모형
fit.con <- lm(Rented_Bike_Count~1, data = dat)
fit.forward <- step(fit.con, scope = list(lower = fit.con, upper = out),
direction = 'forward')
# check data
str(dat)
# check missing data
sum(is.na(dat))
# select columns
dat <- dat[ ,2:11]; dat
# correaltion
cor(dat)
# correaltion
cor(dat)
# y = Rented_Bike_Count, x = each column except Rented_Bike_Count
par(mfrow = c(3,3))
plot(Rented_Bike_Count ~ ., data = dat)
# multiple linear regression
out <- lm(Rented_Bike_Count ~ ., data = dat); out
summary(out)
# 다중공선성 확인
# 2보다 크면 다중공선성이 있는 것
car::vif(out)
sqrt(car::vif(out)) > 2
# ----------------------------------------------------------------
out <- lm(formula = Rented_Bike_Count ~ Temperature + Hour + Humidity +
Rainfall + Solar_Radiation + Visibility + Snowfall, data = dat)
summary(out)
